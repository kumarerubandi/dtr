import React, { Component } from 'react';
import urlUtils from "../../util/url";


import './QuestionnaireForm.css';

import Section from '../Section/Section';
import TextInput from '../Inputs/TextInput/TextInput';
import ChoiceInput from '../Inputs/ChoiceInput/ChoiceInput';
import BooleanInput from '../Inputs/BooleanInput/BooleanInput';
import QuantityInput from '../Inputs/QuantityInput/QuantityInput';
import { findValueByPrefix } from '../../util/util.js';
import OpenChoice from '../Inputs/OpenChoiceInput/OpenChoice';
import DocumentInput from '../Inputs/DocumentInput/DocumentInput';



const state = urlUtils.getUrlParameter("state"); // session key
const code = urlUtils.getUrlParameter("code"); // authorization code
console.log(state);
const params = JSON.parse(sessionStorage[state]); // load app session
const tokenUri = params.tokenUri;
const clientId = params.clientId;
const secret = params.secret;

export default class QuestionnaireForm extends Component {
    constructor(props) {
        super(props);
        this.state = {
            containedResources: null,
            items: null,
            itemTypes: {},
            values: {
                "1.1": "henlo"
            },
            orderedLinks: [],
            sectionLinks:{},
            fullView: true,
            turnOffValues: [],
            files:[],
            communicationJson:{}
        };
        this.updateQuestionValue = this.updateQuestionValue.bind(this);
        this.updateNestedQuestionValue = this.updateNestedQuestionValue.bind(this);
	this.updateDocuments = this.updateDocuments.bind(this);
        this.renderComponent = this.renderComponent.bind(this);
        this.retrieveValue = this.retrieveValue.bind(this);
        this.outputResponse = this.outputResponse.bind(this);

    }

    componentWillMount() {
        // setup
        // get all contained resources
        if (this.props.qform.contained) {
            this.distributeContained(this.props.qform.contained)
        }
        const items = this.props.qform.item;
        this.setState({ items });
        const links = this.prepopulate(items, []);
        this.setState({ orderedLinks: links });
    }

    componentDidMount() {

    }

    evaluateOperator(operator, questionValue, answerValue) {

        switch (operator) {
            case "exists":
                return (answerValue) === (questionValue !== undefined);
            case "=":
                return questionValue === answerValue;
            case "!=":
                return questionValue !== answerValue;
            case "<":
                return questionValue < answerValue;
            case ">":
                return questionValue > answerValue;
            case "<=":
                return questionValue <= answerValue;
            case ">=":
                return questionValue >= answerValue;
            default:
                return questionValue === answerValue;
        }
    }

    retrieveValue(elementName) {
        return this.state.values[elementName];
    }

    updateQuestionValue(elementName, object, type) {
        // callback function for children to update
        // parent state containing the linkIds
        this.setState(prevState => ({
            [type]: {
                ...prevState[type],
                [elementName]: object
            }
        }))
    }

    updateNestedQuestionValue(linkId, elementName, object) {
        this.setState(prevState => ({
            values: {
                ...prevState.values,
                [linkId]: {
                    ...prevState.values[linkId],
                    [elementName]: object
                }
            }
        }))
    }

   updateDocuments(elementName, object){
        console.log(elementName,object,'is it workinggg')
        this.setState({[elementName]:object})
        var fileInputData = {
            "resourceType": "Communication",
            "id": "376",
            "meta": {
                "versionId": "1",
                "lastUpdated": "2018-10-08T07:22:32.421+00:00"
            },
            "status": "preparation",
            "identifier": [
                {
                    "use": "official"
                }
            ],
            "payload": [],
        }
        if (this.state.files != null) {
            for (var i = 0; i < this.state.files.length; i++) {
                (function (file) {
                    let content_type = file.type;
                    let file_name = file.name;
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        // get file content  
                        fileInputData.payload.push({
                            "contentAttachment": {
                                "data": reader.result,
                                "contentType": content_type,
                                "title": file_name,
                                "language": "en"
                            }
                        })
                    }
                    reader.readAsBinaryString(file);
                })(this.state.files[i])
            }
        }
        console.log("Resource Json before communication--",fileInputData );
        // this.props.saveDocuments(this.props.files,fileInputData)
        this.setState({communicationJson:fileInputData})
        // return fileInputData
    }

    distributeContained(contained) {
        // make a key:value map for the contained
        // resources with their id so they can be 
        // referenced by #{id}
        const containedResources = {};
        contained.forEach((resource) => {
            containedResources[resource.id] = resource;
        });
        this.setState({ containedResources })
    }

    checkEnable(item) {
        if (item.hasOwnProperty("enableWhen")) {
            const enableCriteria = item.enableWhen;
            const results = [];
            // false if we need all behaviorType to be "all"
            const checkAny = enableCriteria.length > 1 ? item.enableBehavior === 'any' : false
            enableCriteria.forEach((rule) => {
                const question = this.state.values[rule.question]
                const answer = findValueByPrefix(rule, "answer");
                if (typeof question === 'object' && typeof answer === 'object') {
                    if (rule.answerQuantity) {
                        // at the very least the unit and value need to be the same
                        results.push(this.evaluateOperator(rule.operator, question.value, answer.value.toString())
                            && this.evaluateOperator(rule.operator, question.unit, answer.unit));
                    } else if (rule.answerCoding) {
                        let result = false;
                        if (Array.isArray(question)) {
                            question.forEach((e) => {
                                result = result || (e.code === answer.code && e.system === answer.system);
                            })
                        }
                        results.push(result);
                    }
                } else {
                    results.push(this.evaluateOperator(rule.operator, question, answer));
                }
            });
            return !checkAny ? results.some((i) => { return i }) : results.every((i) => { return i });
        } else {
            // default to showing the item
            return true;
        }
    }


    prepopulate(items, links) {
        items.map((item) => {
            if (item.item) {
                // its a section/group
                links.push(item.linkId);
                this.prepopulate(item.item, links);
            } else {
                // autofill fields
                links.push(item.linkId);
                // if (item.enableWhen) {
                //     console.log(item.enableWhen);
                // }
                if (item.extension) {
                    item.extension.forEach((e) => {
                        if (e.url === "http://hl7.org/fhir/StructureDefinition/cqif-calculatedValue") {
                            // stu3 
                            const value = findValueByPrefix(e, "value");
                            this.updateQuestionValue(item.linkId, this.props.cqlPrepoulationResults[value], 'values')
                        }
                    })
                }
            }
        })
        return links;
    }

    isNotEmpty(value) {
        return (value !== undefined && value !== null && value !== "" && (Array.isArray(value) ? value.length > 0 : true));
    }

    renderComponent(item, level) {
        const enable = this.checkEnable(item);
        if (enable && (this.state.turnOffValues.indexOf(item.linkId) < 0)) {
            switch (item.type) {
                case "group":
                    return <Section
                        key={item.linkId}
                        componentRenderer={this.renderComponent}
                        updateCallback={this.updateQuestionValue}
                        item={item}
                        level={level}
                    />
                case "string":
                    return <TextInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputType="text"
                        inputTypeDisplay="string"
                        valueType="valueString"
                    />

                case "text":
                    return <TextInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputType="textArea"
                        inputTypeDisplay="text"
                        valueType="valueString"
                    />
                case "choice":
                    return <ChoiceInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        containedResources={this.state.containedResources}
                        valueType="valueCoding"
                    />
                case "boolean":
                    return <BooleanInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        valueType="valueBoolean"
                    />
                case "decimal":
                    return <TextInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputType="number"
                        inputTypeDisplay="decimal"
                        valueType="valueDecimal"
                    />

                case "url":
                    return <TextInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputType="url"
                        inputTypeDisplay="url"
                        valueType="valueUri"
                    />
                case "date":
                    return <TextInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputType="date"
                        inputTypeDisplay="date"
                        valueType="valueDate"
                    />
                case "time":
                    return <TextInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputType="time"
                        inputTypeDisplay="time"
                        valueType="valueTime"
                    />
                case "dateTime":
                    return <TextInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputType="datetime-local"
                        inputTypeDisplay="datetime"
                        valueType="valueDateTime"
                    />

                case "attachment":
                    return <TextInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputType="file"
                        inputTypeDisplay="attachment"
                        valueType="valueAttachment"
                    />

                case "integer":
                    return <TextInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputType="number"
                        inputTypeDisplay="valueInteger"
                        valueType="integer"
                    />

                case "quantity":
                    return <QuantityInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateNestedQuestionValue}
                        updateQuestionValue={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputTypeDisplay="quantity"
                        valueType="valueQuantity"
                    />

                case "open-choice":
                    return <OpenChoice
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputTypeDisplay="open-choice"
                        containedResources={this.state.containedResources}
                        valueType={["valueCoding", "valueString"]}
                    />
                default:
                    return <TextInput
                        key={item.linkId}
                        item={item}
                        updateCallback={this.updateQuestionValue}
                        retrieveCallback={this.retrieveValue}
                        inputType="text"
                        inputTypeDisplay="string"
                        valueType="valueString"
                    />
            }
        }
    }

    // create the questionnaire response based on the current state
    outputResponse(status) {
        console.log(this.state.sectionLinks);
        const today = new Date();
        const dd = String(today.getDate()).padStart(2, '0');
        const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
        const yyyy = today.getFullYear();
        const authored = `${yyyy}-${mm}-${dd}`
        const response = {
            resourceType: "QuestionnaireResponse",
            id: "response1",
            authored: authored,
            status: "completed", //TODO: Get status from somewhere
            item: []

        }

        let currentItem = response.item;
        let currentLevel = 0;
        let currentValues = [];
        const chain = {0: {currentItem, currentValues}};
        this.state.orderedLinks.map((item) => {
            const itemType = this.state.itemTypes[item];

            if(Object.keys(this.state.sectionLinks).indexOf(item)>=0) {
                currentValues = currentValues.filter((e)=>{return e!==item});
                if(chain[currentLevel+1]){
                    chain[currentLevel+1].currentValues = currentValues;
                }
                const section = this.state.sectionLinks[item];
                currentValues = section.values;
                // new section
                currentItem = chain[section.level].currentItem
                const newItem = {
                    "linkId": item,
                    "text": section.text,
                    item: []
                };
                currentItem.push(newItem);
                currentItem = newItem.item;
                currentLevel = section.level;

                // filter out this section
                chain[section.level+1] = {currentItem, currentValues};
            }else{
                // not a new section, so it's an item
                if(currentValues.indexOf(item)<0 && itemType && itemType.enabled) {
                    // item not in this section, drop a level
                    const tempLevel = currentLevel;

                    while(chain[currentLevel].currentValues.length === 0 && currentLevel > 0) {
                        // keep dropping levels until we find an unfinished section
                        currentLevel--;
                    }

                    // check off current item
                    chain[tempLevel].currentValues = currentValues.filter((e)=>{return e!==item});

                    currentValues = chain[currentLevel].currentValues;
                    currentItem = chain[currentLevel].currentItem;
                } else {
                    // item is in this section, check it off

                    currentValues = currentValues.filter((e)=>{return e!==item});
                    chain[currentLevel + 1].currentValues = currentValues;
                }
            }
            if (itemType && (itemType.enabled || this.state.turnOffValues.indexOf(item) >= 0)) {
                const answerItem = {
                    "linkId": item,
                    "text": itemType.text,
                    "answer": []
                }
                switch (itemType.valueType) {
                    case "valueAttachment":
                        //TODO
                        break;
                    case "valueQuantity":
                        const quantity = this.state.values[item];
                        if (quantity && quantity.comparator === "=") {
                            delete quantity.comparator;
                        }
                        answerItem.answer.push({ [itemType.valueType]: quantity })
                        break;
                    case "valueDateTime":
                    case "valueDate":
                        const date = this.state.values[item];
                        answerItem.answer.push({ [itemType.valueType]: date.toString() });
                        break;
                    default:
                        const answer = this.state.values[item];
                        if (Array.isArray(answer)) {
                            answer.forEach((e) => {
                                // possible for an array to contain multiple types
                                let finalType;
                                if (e.valueTypeFinal) {
                                    finalType = e.valueTypeFinal;
                                    delete e.valueTypeFinal;
                                } else {
                                    finalType = itemType.valueType;
                                }
                                answerItem.answer.push({ [finalType]: e });
                            })
                        } else {
                            answerItem.answer.push({ [itemType.valueType]: answer });
                        }
                }
                // FHIR fields are not allowed to be empty or null, so we must prune
                if (this.isEmptyAnswer(answerItem.answer))
                {
                    // console.log("Removing empty answer: ", answerItem);
                    delete answerItem.answer;
                }
                currentItem.push(answerItem);
            }
        });
        console.log(response);
        //const priorAuthBundle = JSON.parse(JSON.stringify(this.props.bundle));
	//c_data = "";
        //const priorAuthBundle = JSON.parse(JSON.stringify(c_data));
        //priorAuthBundle.entry.unshift({ resource: this.props.deviceRequest })
        //priorAuthBundle.entry.unshift({ resource: response })
        //console.log(priorAuthBundle);
/*
        const priorAuthClaim = {
            resourceType: "Claim",
            status: "active",
            type: {coding: [{
                system: "http://terminology.hl7.org/CodeSystem/claim-type",
                code: "professional",
                display: "Professional"
            }]},
            use: "preauthorization",
            patient: { reference: this.makeReference(priorAuthBundle, "Patient") },
            created: authored,
            provider: { reference: this.makeReference(priorAuthBundle, "Practitioner") },
            priority: {coding: [{"code": "normal"}]},
            presciption: { reference: this.makeReference(priorAuthBundle, "DeviceRequest") },
            supportingInfo: [{
                sequence: 1,
                category: {coding: [{
                    system: "http://terminology.hl7.org/CodeSystem/claiminformationcategory",
                    code: "info",
                    display: "Information"
                }]},
                valueReference: { reference: this.makeReference(priorAuthBundle, "QuestionnaireResponse") }
            }],
            diagnosis: [],
            insurance: [{
                sequence: 1,
                focal: true,
                coverage: { reference: this.makeReference(priorAuthBundle, "Coverage") }
            }]
        }
        var sequence = 1;
        priorAuthBundle.entry.forEach(function(entry, index) {
            if (entry.resource.resourceType == "Condition") {
                priorAuthClaim.diagnosis.push({
                    sequence: sequence++,
                    diagnosisReference: { reference: "Condition/" + entry.resource.id }
                });
            }
        })
        console.log(priorAuthClaim,'HEREEE',tokenUri);
        console.log(JSON.stringify(priorAuthClaim));

        priorAuthBundle.entry.unshift({ resource: priorAuthClaim })
*/
        /*creating token */
        const tokenPost = new XMLHttpRequest();
        var auth_response;
        tokenPost.open("POST", tokenUri);
        tokenPost.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        var data = `client_id=${clientId}&grant_type=password&username=john&password=john123`
        
        tokenPost.onload =   function (){
        if (tokenPost.status === 200) {
            try { 
            auth_response = JSON.parse(tokenPost.responseText);
            console.log("auth res--1243-", auth_response);
            } catch (e) {
            const errorMsg = "Failed to parse auth response";
            document.body.innerText = errorMsg;
            console.error(errorMsg);
            return;
            }
            /** creating cliam  */
            const Http = new XMLHttpRequest();
            // const priorAuthUrl = "https://davinci-prior-auth.logicahealth.org/fhir/Claim/$submit";
            const priorAuthUrl = "http://cmsfhir.mettles.com:8080/drfp/fhir/Claim/$submit";
	    //const priorAuthUrl = "http://54.227.218.17:9000/fhir/Claim/$submit";
	    const pBundle = {
   "resourceType":"Bundle",
   "id": "1234567890",
   "type":"collection",
   "entry":[
      {
         "resource":{
            "resourceType":"Claim",
            "status":"active",
            "type":{
               "coding":[
                  {
                     "system":"http://terminology.hl7.org/CodeSystem/claim-type",
                     "code":"institutional",
                     "display":"Institutional"
                  }
               ]
            },
            "subType":{
               "coding":[
                  {
                     "system":"https://www.cms.gov/codes/billtype",
                     "code":"32",
                     "display":"Hospital Outpatient Surgery performed in an Ambulatory ​Surgical Center"
                  }
               ]
            },
            "use":"preauthorization",
            "patient":{
               "reference":"Patient/1"
            },
            "created":"2019-07-12",
            "provider":{
               "reference":"Organization/516"
            },
            "insurer":{
               "reference":"Organization/415"
            },
            "facility":{
               "reference":"Location/235"
            },
            "priority":{
               "coding":[
                  {
                     "code":"normal"
                  }
               ]
            },
            "supportingInfo":[
               {
                  "sequence":1,
                  "category":{
                     "coding":[
                        {
                           "system":"http://hl7.org/us/davinci-pas/CodeSystem/PASSupportingInfoType",
                           "code":"patientEvent"
                        }
                     ]
                  },
                  "timingPeriod":{
                        "start": "2015-10-01T00:00:00-07:00",
                        "end":"2015-10-05T00:00:00-07:00"
                  }
               }
            ],
            "item":[
               {
                  "sequence":3456,
                  "productOrService":{
                     "coding":[
                        {
                           "system":"http://www.ama-assn.org/go/cpt",
                           "code":"G0299"
                        }
                     ]
                  },
                  "quantity":{
                       "value":5
                  }
               }
            ],
            "careTeam":[
               {
                  "sequence":1,
                  "provider":{
                     "reference":"Practitioner/386"
                  },
                  "extension":[
				  {
                     "url":"http://terminology.hl7.org/ValueSet/v2-0912",
                     "valueCode":"AT"
                  }
				  ]
               },
               {
                  "sequence":2,
                  "provider":{
                     "reference":"Practitioner/386"
                  },
                  "extension":[
                   {
                     "url":"http://terminology.hl7.org/ValueSet/v2-0912",
                     "valueCode":"OP"
                  }
				 ]
               }
            ],
            "diagnosis":[
               {
                  "sequence":123,
                  "diagnosisReference":{
                  	 "reference":"Condition/234"
                	
                  }
                  
               }
            ],
            "insurance":[
               {
                  "sequence":1,
                  "focal":true,
                  "coverage":{
                     "reference":"Coverage/29956"
                  }
               }
            ]
         }
      },
      {
         "resource":{
            "resourceType":"Condition",
            "id":"234",
            "code":{
                         "coding": [
               {
                  "code":"G1221",
                  "system":"http://hl7.org/fhir/sid/icd-10-cm",
                  "display":"G1221,Amyotrophic lateral sclerosis"
               }
			   ]
            
         },
         "subject":{
            "reference":"Patient/1"
         }
      }
      },
      {
         "resource":{
		 
		 
            "resourceType":"Patient",
            "id":"1",
             "identifier":[
               {
                  "use":"usual",
                  "type":{
                     "coding":[
                        {
                           "system":"http://hl7.org/fhir/sid/us-medicare",
                           "code":"MC"
                        }
                     ]
                  },
                  "value":"525697298M"
               }
            ],
            "active":true,
            "name":[
               {
                  "use":"official",
                  "family":"Miami",
                  "given":[
                     "Michael"
                  ]
               }
            ],
            "gender":"male",
            "birthDate":"1938-08-11",
            "_birthDate":{
               "extension":[
                  {
                     "url":"http://hl7.org/fhir/StructureDefinition/patient-birthTime",
                     "valueDateTime":"1972-05-12T14:02:45-04:00"
                  }
               ]
            },
            "deceasedBoolean":false,
            "address":[
               {
                  "line":[
                     "1763 Pitkin Cir"
                  ],
                  "city":"Aurora",
                  "state":"CO",
                  "postalCode":"80017",
                  "country":"US"
               }
            ]
         }
      },
      {
                   "resource":{
         "resourceType":"Organization",
         "id":"415",
          "identifier":[
            {
               "system":"urn:ietf:rfc:3986",
               "value":"2.16.840.1.113883.13.34.110.1.110.99"
            }
         ],
         "name":"MGS123"
          }
      },
      {
                           "resource":{
         "resourceType":"Location",
         "id":"235",
        
         "type":[
		 {
        "coding":[
            {
               "system":"http://terminology.hl7.org/CodeSystem/v3-RoleCode",
               "code":"PTRES",
               "display":"Patient's Residence"
            }
         ]
          }
         ],
         
         "managingOrganization":{
            "reference":"Organization/516"
         }
      }
	  },
      {
                 "resource":{
         "resourceType":"Organization",
         "id":"516",
         "identifier":[
            {
               "system":"http://hl7.org.fhir/sid/us-npi",
               "value":"1427862956"
            }
         ],
         "name":"Home Health Services",
         "address":[
            {
               "use":"work",
               "line":[
                  "106 19th Ave 101"
               ],
               "city":"Moline",
               "state":"IL",
               "postalCode":"61265"
            }
         ],
         "contact":[
            {
               "name":[
                  {
                     "use":"official",
                     "family":"Dow",
                     "given":[
                        "Jones"
                     ]
                  }
               ],
               "telecom":[
                  {
                     "system":"phone",
                     "value":"555-555-5555",
                     "use":"home"
                  }
               ]
            }
         ]
      }
       },
      {
         "resource":{
            "resourceType":"Practitioner",
            "id":"386",
            "identifier":[
               {
                  "system":"http://hl7.org.fhir/sid/us-npi",
                  "value":"1234567890"
               }
            ],
            "name":[
			{
               "use":"official",
               "family":"Uber",
               "given":[
                  "Kathy"
               ]
            }
			],
            "address":[
               {
                  "use":"work",
                  "line":[
                     "610 S Maple Ave"
                  ],
                  "city":"Oak Park",
                  "state":"IL",
                  "postalCode":"60304"
               }
            ]
         }
      },
      {
         "resource":{
            "resourceType":"Coverage",
            "id":"29956",
            "meta":{
               "versionId":"1",
               "lastUpdated":"2019-07-11T06:27:08.949+00:00",
               "profile":[
                  "http://hl7.org/fhir/us/davinci-deqm/STU3/StructureDefinition/coverage-deqm"
               ]
            },
            "identifier":[
               {
                  "system":"http://benefitsinc.com/certificate",
                  "value":"10138556"
               }
            ],
            "status":"active",
            "type":{
               "coding":[
                  {
                     "system":"http://terminology.hl7.org/CodeSystem/v3-ActCode",
                     "code":"HIP",
                     "display":"health insurance plan policy"
                  }
               ]
            },
            "policyHolder":{
               "reference":"Patient/1"
            },
            "subscriber":{
               "reference":"Patient/1"
            },
            "subscriberId":"525697298M",
            "beneficiary":{
               "reference":"Patient/1"
            },
            "relationship":{
               "coding":[
                  {
                     "code":"self"
                  }
               ]
            },
            "payor":[
               {
                  "reference":"Organization/415"
               }
            ]
         }
      }
   ]
};
            Http.open("POST", priorAuthUrl);
            Http.setRequestHeader("Content-Type", "application/fhir+json");
            //Http.setRequestHeader("Authorization", "Bearer "+auth_response.access_token);
            Http.send(JSON.stringify(pBundle));
	    //Http.send(JSON.stringify(priorAuthBundle));
            Http.onreadystatechange = function() {
                if (this.readyState === XMLHttpRequest.DONE) {
                    var message = "";
                    if (this.status === 200) {
                        var claimResponse = JSON.parse(this.responseText);
                        message = "Prior Authoriza  tion " + claimResponse.disposition + "\n";
                        message += "Prior Authorization Number: " + claimResponse.preAuthRef;
                    } else {
                        message = "Prior Authorization Request Failed."
                    }
                    console.log(message);
                    alert(message);
                    console.log(this.responseText);
                }
            }


        }else {
            const errorMsg = "Token post request failed. Returned status: " + tokenPost.status;
            document.body.innerText = errorMsg;
            console.error(errorMsg);
            return;
          }
        };
        tokenPost.send(data)
        // const Http = new XMLHttpRequest();
        // // const priorAuthUrl = "https://davinci-prior-auth.logicahealth.org/fhir/Claim/$submit";
        // const priorAuthUrl = "http://54.227.218.17:9000/fhir/Claim/$submit";
        // Http.open("POST", priorAuthUrl);
        // Http.setRequestHeader("Content-Type", "application/fhir+json");
        // Http.setRequestHeader("Authorization", "Bearer "+auth_response);
        // Http.send(JSON.stringify(priorAuthBundle));
        // Http.onreadystatechange = function() {
        //     if (this.readyState === XMLHttpRequest.DONE) {
        //         var message = "";
        //         if (this.status === 200) {
        //             var claimResponse = JSON.parse(this.responseText);
        //             message = "Prior Authorization " + claimResponse.disposition + "\n";
        //             message += "Prior Authorization Number: " + claimResponse.preAuthRef;
        //         } else {
        //             message = "Prior Authorization Request Failed."
        //         }
        //         console.log(message);
        //         alert(message);
        //         console.log(this.responseText);
        //     }
        // }
    }

    isEmptyAnswer(answer) {
        return ((answer.length < 1) ||
                (JSON.stringify(answer[0]) == "{}") ||
                (answer[0].hasOwnProperty("valueString") && (answer[0].valueString == null || answer[0].valueString == "")) ||
                (answer[0].hasOwnProperty("valueDateTime") && (answer[0].valueDateTime == null || answer[0].valueDateTime == "")) ||
                (answer[0].hasOwnProperty("valueDate") && (answer[0].valueDate == null || answer[0].valueDate == "")) ||
                (answer[0].hasOwnProperty("valueBoolean") && (answer[0].valueBoolean == null || answer[0].valueBoolean == "")) ||
                (answer[0].hasOwnProperty("valueQuantity") && (answer[0].valueQuantity.value == null || answer[0].valueQuantity.value == "")));
    }

    makeReference(bundle, resourceType) {
        var entry = bundle.entry.find(function(entry) {
            return (entry.resource.resourceType == resourceType);
        });
        return resourceType + "/" + entry.resource.id;
    }

    removeFilledFields() {
        if (this.state.turnOffValues.length > 0) {
            this.setState({ turnOffValues: [] });
        } else {
            const returnArray = [];
            this.state.orderedLinks.forEach((e) => {
                if (this.isNotEmpty(this.state.values[e]) && this.state.itemTypes[e] && this.state.itemTypes[e].enabled) {
                    returnArray.push(e);
                }
            });
            this.setState({ turnOffValues: returnArray });
        }
    }
    render() {
        return (
            <div>
                <div className="floating-tools">
                    <p className="filter-filled" >filter: <input type="checkbox" onClick={() => {
                        this.removeFilledFields();
                    }}></input></p>
                </div>
                <h2 className="document-header">{this.props.qform.title}

                </h2>

                <div className="sidenav">
                    {this.state.orderedLinks.map((e) => {
                        if(Object.keys(this.state.sectionLinks).indexOf(e)<0) {
                            const value = this.state.values[e];
                            let extraClass;
                            let indicator;
                            if (this.state.itemTypes[e] && this.state.itemTypes[e].enabled) {
                                extraClass = (this.isNotEmpty(value) ? "sidenav-active" : "")
                                indicator = true;
                            } else {
                                if (this.isNotEmpty(value) && this.state.turnOffValues.indexOf(e) > -1) {
                                    extraClass = "sidenav-manually-disabled";
                                } else if (value) {
                                    extraClass = "sidenav-disabled filled"
                                } else {
                                    extraClass = "sidenav-disabled"
                                }
    
                            }
                            return <div
                                key={e}
                                className={"sidenav-box " + extraClass}
                                onClick={() => {
                                    indicator ? window.scrollTo(0, this.state.itemTypes[e].ref.current.previousSibling.offsetTop) : null;
                                }}
                            >
                                {e}
                            </div>
                        }
                    })}
                    <div className="sidenav-box "></div>
                </div>
                {/* <div className="wrapper">
                    {
                        this.state.items.map((item) => {
                            return this.renderComponent(item, 0);
                        })
                    }
                </div> */}
                <div className="wrapper1">
                    {
                        this.state.items.map((item) => {
                            if (item.linkId <= (this.state.items.length / 2 + 1)) {
                                return this.renderComponent(item, 0);
                            }
                        })
                    }
                </div>
                <div className="wrapper2">
                    <div>
                        {
                            this.state.items.map((item) => {
                                if (item.linkId > (this.state.items.length / 2 + 1)) {
                                    return this.renderComponent(item, 0);
                                }
                            })
                        }
			<DocumentInput
                            updateCallback={this.updateDocuments}
                        />
                    </div>
                </div>
                <button className="btn submit-button" onClick={this.outputResponse}>Submit</button>
            </div>
        );
    }
}
